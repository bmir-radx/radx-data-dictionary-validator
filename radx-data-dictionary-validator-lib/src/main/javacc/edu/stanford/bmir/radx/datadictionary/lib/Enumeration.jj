options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = true;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(EnumerationParser)

package edu.stanford.bmir.radx.datadictionary.lib;

import java.util.List;
import java.util.ArrayList;

/**
* A parser that parses RADx Data Dictionary Enumerations
*/
public class EnumerationParser {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    EnumerationParser parser = new EnumerationParser(System.in);
    parser.Choices();
  }

  private static String extractValue(Token t) {
    String raw = getRaw(t);
      return raw.replace("\\\"", "\"");
  }

  private static String getRaw(Token t) {
      if(t == null) {
          return "";
      }
    return t.image.substring(1, t.image.length() - 1);
  }

  private static String extractLabel(Token t) {
    String raw = getRaw(t);
      return raw.replace("\\]", "]");
  }

  private static String extractIri(Token t) {
    String raw = getRaw(t);
      return raw.replace("\\)", ")");
  }

}

PARSER_END(EnumerationParser)

SKIP : {
    " " | "\n" | "\t" | "\r"
}

TOKEN: {
    <QUOTED_VALUE:  "\""("\\" ~[]  |  ~["\"","\\"])*"\"" >
}

TOKEN: {
    <DELIMETER: "|">
}

TOKEN: {
    <QUOTED_LABEL:  "["("\\" ~[]  |  ~["]","\\"])*"]" >
}

TOKEN : {
    <IRI: "(" ("\\" ~[]  |  ~[")","\\"])*")">
}

Enumeration Enumeration() :
{
    List<EnumerationChoice> choices;
}
{
    choices=Choices() {
    return new Enumeration(choices); }
}


List<EnumerationChoice> Choices() :
{
    List<EnumerationChoice> choices = new ArrayList<EnumerationChoice>();
    EnumerationChoice choice;
}
{
  choice = Choice() { choices.add(choice);  } (<DELIMETER> choice=Choice(){ choices.add(choice);  })* <EOF> { return choices; }
}

EnumerationChoice Choice() :
{
    Token valueToken, labelToken;
    Token iriToken = null;
}
{
    valueToken=<QUOTED_VALUE> "=" labelToken=<QUOTED_LABEL>(iriToken=<IRI>)? { return new EnumerationChoice(extractValue(valueToken),
                                                                                          extractLabel(labelToken),
                                                                                          extractIri(iriToken)); }
}
